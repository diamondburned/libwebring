{
  "version": 3,
  "sources": ["https://deno.land/x/literal_html@1.1.0/mod.ts", "../lib/webring.ts"],
  "sourcesContent": ["type LiteralHTMLContentValue = {\n    /** General HTML/XML content that should have &, <, and > escaped (e.g. html`<p>${{content: \"This will be <escaped>\"}}</p>`) */\n    content: string\n};\n\ntype LiteralHTMLAttributeValue = {\n    /** HTML/XML attribute value that should have &, <, >, ', and \" escaped (e.g. html`<img alt=\"${{attr: 'This will be \"escaped\"'}}\" />`) */\n    attr: string\n};\n\ntype LiteralHTMLScriptStringLiteralValue = {\n    /** A string literal within an HTML script tag (namely for JSON-LD) that should have <, \", and \\ escaped */\n    scriptString: string\n};\n\ntype LiteralHTMLQueryParameterValue = {\n    /** Value for a URI Component (e.g. query parameter) that should be escaped using encodeURIComponent() */\n    param: string\n};\n\ntype LiteralHTMLVerbatimValue = {\n    /** Verbatim HTML/XML content that should be copied verbatim; only use with valid HTML/XML strings (e.g. html`<p>${{verbatim: \"Line 1<br/>Line 2<br/>\"}}</p>`)  */\n    verbatim: string\n};\n\ntype LiteralHTMLValue =\n    | string\n    | number\n    | LiteralHTMLContentValue\n    | LiteralHTMLAttributeValue\n    | LiteralHTMLScriptStringLiteralValue\n    | LiteralHTMLQueryParameterValue\n    | LiteralHTMLVerbatimValue\n;\n\ntype taggedTemplateLiteralHandler = (strings: TemplateStringsArray, ...values: LiteralHTMLValue[]) => string;\n\nfunction createEscaper(aposEntity: string): taggedTemplateLiteralHandler {\n    const escapeDefault = (str: string) => str\n        .replaceAll(\"&\", \"&amp;\")\n        .replaceAll(\"<\", \"&lt;\")\n        .replaceAll(\">\", \"&gt;\")\n        .replaceAll(\"'\", aposEntity)\n        .replaceAll(\"\\\"\", \"&quot;\")\n    ;\n\n    return (strings, ...values): string => {\n        let result = strings[0];\n        let i = 1;\n        for (const value of values) {\n            switch (typeof(value)) {\n                case \"string\":\n                    // Default escaping: &<>'\"\n                    result += escapeDefault(value);\n                    break;\n\n                case \"number\":\n                    // No escaping for numbers\n                    result += value.toString();\n                    break;\n\n                case \"object\":\n                    {\n                        switch (Object.keys(value)[0]) {\n                            case \"content\":\n                                // Content escaping: &<>\n                                result += (value as LiteralHTMLContentValue).content\n                                    .replaceAll(\"&\", \"&amp;\")\n                                    .replaceAll(\"<\", \"&lt;\")\n                                    .replaceAll(\">\", \"&gt;\")\n                                ;\n                                break;\n                            \n                            case \"attr\":\n                                // Attribute value escaping: &<>'\"\n                                result += escapeDefault((value as LiteralHTMLAttributeValue).attr);\n                                break;\n\n                            case \"scriptString\" :\n                                // HTML script string literal escaping: <\"\\\n                                result += (value as LiteralHTMLScriptStringLiteralValue).scriptString\n                                    .replaceAll(\"\\\\\", \"\\\\\\\\\")\n                                    .replaceAll(\"<\", \"\\\\x3C\")\n                                    .replaceAll(\"\\\"\", \"\\\\\\\"\")\n                                ;\n                                break;\n                            \n                            case \"param\":\n                                // URI Component (and attribute) escaping\n                                result += escapeDefault(encodeURIComponent((value as LiteralHTMLQueryParameterValue).param));\n                                break;\n\n                            case \"verbatim\":\n                                // Verbatim copy: no escaping\n                                result += (value as LiteralHTMLVerbatimValue).verbatim;\n                                break;\n                        }\n                    }\n                    break;\n            }\n\n            result += strings[i++];\n        }\n        return result;\n    };\n}\n\n/** Tagged literal template handler for HTML templates; accepts strings, numbers, and objects with a single key named content, attr, param, or verbatim */\nexport const html: taggedTemplateLiteralHandler = createEscaper(\"&#39;\");\n\n/** Tagged literal template handler for XML templates; accepts strings, numbers, and objects with a single key named content, attr, param, or verbatim */\nexport const xml: taggedTemplateLiteralHandler = createEscaper(\"&apos;\");\n", "import { html } from \"https://deno.land/x/literal_html@1.1.0/mod.ts\";\n\nexport type WebringData = {\n  readonly version: 1;\n  name?: string;\n  root?: string;\n  ring: WebringLink[];\n};\n\nexport type WebringLink = {\n  name: string;\n  link: string;\n};\n\nexport type WebringStatusData = {\n  readonly version: 1;\n  anomalies: Record<string, WebringLinkStatus>;\n};\n\nexport type WebringLinkStatus = {\n  dead?: boolean;\n  missingWebring?: boolean;\n};\n\nexport class Webring {\n  #data: WebringData | null = null;\n  #link: WebringLink | null = null; // as in chain link\n  #statusData: WebringStatusData | null = null;\n\n  constructor(\n    readonly src: string,\n    readonly opts: {\n      name?: string; // override the name of the link to use\n      statusSrc?: string;\n      data?: WebringData;\n      statusData?: WebringStatusData;\n      // excludeMissingWebringSites returns true if sites that don't have a\n      // webring link should be excluded from the webring. readonly\n      excludeMissingWebringSites?: boolean;\n    }\n  ) {\n    this.#data = opts.data || null;\n    this.#statusData = opts.statusData || null;\n  }\n\n  // surroundingLinks returns the links to the left and right of the current\n  // link, or null if there are no surrounding links.\n  surroundingLinks(): { left: WebringLink; right: WebringLink } | null {\n    if (!this.available) {\n      return null;\n    }\n\n    const ix = this.#data.ring.indexOf(this.#link);\n    if (ix == -1) {\n      return null;\n    }\n\n    const leftIx = (ix - 1 + this.#data.ring.length) % this.#data.ring.length;\n    const rightIx = (ix + 1) % this.#data.ring.length;\n\n    return {\n      left: this.#data.ring[leftIx],\n      right: this.#data.ring[rightIx],\n    };\n  }\n\n  get data(): WebringData {\n    return this.#data;\n  }\n\n  set data(data: WebringData) {\n    this.#data = data;\n    this.initLink();\n  }\n\n  get statusData(): WebringStatusData {\n    return this.#statusData;\n  }\n\n  set statusData(statusData: WebringStatusData) {\n    this.#statusData = statusData;\n  }\n\n  get link(): WebringLink | null {\n    return this.#link;\n  }\n\n  // available is true if the webring data is available.\n  get available(): boolean {\n    return !!this.#data && !!this.#link;\n  }\n\n  // update updates the webring data. It overrides the existing internal data.\n  async update() {\n    this.#data = null;\n    this.#statusData = null;\n    await this.init();\n  }\n\n  // includeLink returns true if the link should be included in the webring.\n  includeLink(link: WebringLink): boolean {\n    if (this.#statusData) {\n      const anomaly = this.#statusData.anomalies[link.link];\n      if (anomaly) {\n        if (anomaly.dead) {\n          return false;\n        }\n        if (this.opts.excludeMissingWebringSites && anomaly.missingWebring) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  private async init() {\n    if (!this.#data) {\n      await this.initData(this.src);\n      this.initLink();\n    }\n\n    if (!this.#statusData) {\n      try {\n        await this.initStatusData(\n          this.opts.statusSrc || guessStatusSrc(this.src)\n        );\n      } catch (err) {\n        console.error(\"Failed to fetch status data\", err);\n      }\n    }\n  }\n\n  private async initData(src: string) {\n    const response = await fetch(src);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch webring data: ${response.status}`);\n    }\n\n    this.#data = await response.json();\n    if (this.#data.version != 1) {\n      throw new Error(\n        `Unsupported webring format version: ${this.#data.version}`\n      );\n    }\n  }\n\n  private initLink() {\n    if (this.opts.name) {\n      this.#link = this.#data.ring.find((l) => l.name === this.opts.name);\n    } else {\n      const domain = window.location.host;\n      this.#link = this.#data.ring.find((l) => domainIncludes(l.link, domain));\n    }\n  }\n\n  private async initStatusData(statusSrc: string) {\n    const response = await fetch(statusSrc);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch status data: ${response.status}`);\n    }\n\n    this.#statusData = await response.json();\n    switch (this.#statusData.version) {\n      case 1: {\n        // Only keep links that are not in the unavailable list.\n        this.#data.ring = this.#data.ring.filter((l) => this.includeLink(l));\n        break;\n      }\n      default: {\n        throw new Error(\n          `Unsupported status format version: ${this.#statusData.version}`\n        );\n      }\n    }\n  }\n}\n\nexport class WebringElement extends HTMLElement {\n  private webring: Webring;\n\n  constructor() {\n    super();\n\n    const src = this.attributes[\"src\"]?.value;\n    if (!src) {\n      console.error(\"Not rendering webring: missing src attribute\");\n      this.setVisible(false);\n      return;\n    }\n\n    this.webring = new Webring(src, {\n      name: this.attributes[\"name\"]?.value,\n      statusSrc: this.attributes[\"status-src\"]?.value,\n      excludeMissingWebringSites: this.hasAttribute(\n        \"exclude-missing-webring-sites\"\n      ),\n    });\n\n    if (elementIsEmpty(this)) {\n      this.innerHTML = html`\n        <p class=\"ring-info\">\n          <a href=\"#\" class=\"ring\" target=\"_blank\"></a> webring\n        </p>\n        <p class=\"ring-body\">\n          <a class=\"left\" href=\"#\" target=\"_blank\"></a>\n          <span class=\"middle\"></span>\n          <a class=\"right\" href=\"#\" target=\"_blank\"></a>\n        </p>\n      `;\n    }\n  }\n\n  connectedCallback() {\n    this.update();\n  }\n\n  // update asynchronously updates the webring data and re-renders the element.\n  update() {\n    this.webring.update().then(() => this.render());\n  }\n\n  private render() {\n    for (const k in this.dataset) {\n      delete this.dataset[k];\n    }\n\n    const surroundingLinks = this.webring.surroundingLinks();\n    if (!surroundingLinks) {\n      this.setVisible(false);\n      return;\n    }\n\n    this.dataset.ringName = this.webring.data.name;\n    this.dataset.linkName = this.webring.link.name;\n    this.dataset.leftLinkName = surroundingLinks.left.name;\n    this.dataset.rightLinkName = surroundingLinks.right.name;\n\n    this.$<HTMLAnchorElement>(\".left\", (a) => {\n      a.href = linkURL(surroundingLinks.left);\n      a.textContent = surroundingLinks.left.name;\n    });\n\n    this.$<HTMLAnchorElement>(\".ring\", (a) => {\n      a.href = this.webring.data.root;\n      a.textContent = this.webring.data.name || \"\";\n    });\n\n    this.$(\".middle\", (span) => {\n      span.textContent = this.webring.link.name || \"\";\n    });\n\n    this.$<HTMLAnchorElement>(\".right\", (a) => {\n      a.href = linkURL(surroundingLinks.right);\n      a.textContent = surroundingLinks.right.name;\n    });\n\n    this.setVisible(true);\n  }\n\n  private setVisible(visible: boolean) {\n    this.setAttribute(\"style\", visible ? \"\" : \"display: none;\");\n  }\n\n  private $<T = HTMLElement>(selector: string, f: (_: T) => void) {\n    const el = this.querySelector(selector);\n    if (!el) {\n      throw new Error(`Element not found: ${selector}`);\n    }\n    f(el as T);\n  }\n}\n\n// domainIncludes returns true if matchingDomain is a subdomain of domain.\nfunction domainIncludes(domain: string, matchingDomain: string): boolean {\n  return domain == matchingDomain || matchingDomain.endsWith(`.${domain}`);\n}\n\nfunction linkURL(link: WebringLink): string {\n  if (link.link.includes(\"://\")) {\n    return link.link;\n  }\n  return `https://${link.link}`;\n}\n\nfunction elementIsEmpty(el: HTMLElement): boolean {\n  return el.innerHTML.trim() == \"\";\n}\n\nfunction guessStatusSrc(src: string): string {\n  // webring.json -> webring.status.json\n  const parts = src.split(\".\");\n  parts[parts.length - 1] = \"status.\" + parts[parts.length - 1];\n  return parts.join(\".\");\n}\n\ncustomElements.define(\"webring-element\", WebringElement);\n"],
  "mappings": "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",
  "names": ["createEscaper", "aposEntity", "escapeDefault", "str", "strings", "values", "result", "i", "value", "html", "xml", "Webring", "src", "opts", "#data", "#statusData", "#link", "ix", "leftIx", "rightIx", "data", "statusData", "link", "anomaly", "guessStatusSrc", "err", "response", "l", "domain", "domainIncludes", "statusSrc", "WebringElement", "elementIsEmpty", "html", "k", "surroundingLinks", "a", "linkURL", "span", "visible", "selector", "f", "el", "matchingDomain", "parts"]
}

{
  "version": 3,
  "sources": ["../lib/webring.ts"],
  "sourcesContent": ["export type WebringData = {\n  readonly version: 1;\n  name?: string;\n  root?: string;\n  ring: WebringLink[];\n};\n\nexport type WebringLink = {\n  name: string;\n  link: string;\n};\n\nexport type WebringStatusData = {\n  readonly version: 1;\n  anomalies: Record<string, WebringLinkStatus>;\n};\n\nexport type WebringLinkStatus = {\n  dead?: boolean;\n  missingWebring?: boolean;\n};\n\nexport class Webring {\n  #data: WebringData | null = null;\n  #link: WebringLink | null = null; // as in chain link\n  #statusData: WebringStatusData | null = null;\n\n  constructor(\n    readonly src: string | WebringData,\n    readonly opts: {\n      name?: string; // override the name of the link to use\n      statusSrc?: string;\n      statusData?: WebringStatusData;\n      // includeMissingWebringSites is true if sites that don't have a\n      // webring link should be included from the webring.\n      // This field is not always effective. See README for details.\n      includeMissingWebringSites?: boolean;\n    },\n  ) {\n    this.#data = typeof src === \"object\" ? src : null;\n    this.#statusData = opts.statusData || null;\n  }\n\n  // surroundingLinks returns the links to the left and right of the current\n  // link, or null if there are no surrounding links.\n  surroundingLinks(): { left: WebringLink; right: WebringLink } | null {\n    if (!this.available) {\n      return null;\n    }\n\n    const ix = this.#data.ring.indexOf(this.#link);\n    if (ix == -1) {\n      return null;\n    }\n\n    const leftIx = (ix - 1 + this.#data.ring.length) % this.#data.ring.length;\n    const rightIx = (ix + 1) % this.#data.ring.length;\n\n    return {\n      left: this.#data.ring[leftIx],\n      right: this.#data.ring[rightIx],\n    };\n  }\n\n  get data(): WebringData {\n    return this.#data;\n  }\n\n  set data(data: WebringData) {\n    this.#data = data;\n    this.initLink();\n  }\n\n  get statusSrc(): string | undefined {\n    if (this.opts.statusSrc) {\n      return this.opts.statusSrc;\n    }\n    if (typeof this.src === \"string\") {\n      return guessStatusSrc(this.src);\n    }\n    return undefined;\n  }\n\n  get statusData(): WebringStatusData {\n    return this.#statusData;\n  }\n\n  set statusData(statusData: WebringStatusData) {\n    this.#statusData = statusData;\n  }\n\n  get link(): WebringLink | null {\n    return this.#link;\n  }\n\n  // available is true if the webring data is available.\n  get available(): boolean {\n    return !!this.#data && !!this.#link;\n  }\n\n  // update updates the webring data. It overrides the existing internal data.\n  async update() {\n    this.#data = null;\n    this.#statusData = null;\n    await this.init();\n  }\n\n  // includeLink returns true if the link should be included in the webring.\n  includeLink(link: WebringLink): boolean {\n    if (this.#statusData) {\n      const anomaly = this.#statusData.anomalies[link.link];\n      if (anomaly) {\n        if (anomaly.dead) {\n          return false;\n        }\n        if (anomaly.missingWebring && !this.opts.includeMissingWebringSites) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  private async init() {\n    if (!this.#data) {\n      await this.initData(this.src);\n      this.initLink();\n    }\n\n    if (!this.#statusData) {\n      if (this.statusSrc) {\n        try {\n          await this.initStatusData(this.statusSrc);\n        } catch (err) {\n          console.error(\"Failed to fetch status data\", err);\n        }\n      }\n    }\n  }\n\n  private async initData(src: string | WebringData) {\n    if (typeof src === \"object\") {\n      this.#data = src;\n    } else {\n      const response = await fetch(src);\n      if (!response.ok) {\n        throw new Error(`Failed to fetch webring data: ${response.status}`);\n      }\n      this.#data = await response.json();\n    }\n\n    if (this.#data.version != 1) {\n      throw new Error(\n        `Unsupported webring format version: ${this.#data.version}`,\n      );\n    }\n  }\n\n  private initLink() {\n    if (this.opts.name) {\n      this.#link = this.#data.ring.find((l) => l.name === this.opts.name);\n    } else {\n      const domain = window.location.host;\n      this.#link = this.#data.ring.find((l) => domainIncludes(l.link, domain));\n    }\n  }\n\n  private async initStatusData(statusSrc: string) {\n    const response = await fetch(statusSrc);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch status data: ${response.status}`);\n    }\n\n    this.#statusData = await response.json();\n    switch (this.#statusData.version) {\n      case 1: {\n        // Only keep links that are not in the unavailable list.\n        this.#data.ring = this.#data.ring.filter((l) => this.includeLink(l));\n        break;\n      }\n      default: {\n        throw new Error(\n          `Unsupported status format version: ${this.#statusData.version}`,\n        );\n      }\n    }\n  }\n}\n\n// domainIncludes returns true if matchingDomain is a subdomain of domain.\nexport function domainIncludes(\n  domain: string,\n  matchingDomain: string,\n): boolean {\n  return domain == matchingDomain || matchingDomain.endsWith(`.${domain}`);\n}\n\nexport function guessStatusSrc(src: string): string {\n  // webring.json -> webring.status.json\n  const parts = src.split(\".\");\n  parts[parts.length - 1] = \"status.\" + parts[parts.length - 1];\n  return parts.join(\".\");\n}\n"],
  "mappings": "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",
  "names": ["_data", "_link", "_statusData", "Webring", "src", "opts", "__privateAdd", "__privateSet", "ix", "__privateGet", "leftIx", "rightIx", "data", "guessStatusSrc", "statusData", "link", "anomaly", "err", "response", "l", "domain", "domainIncludes", "statusSrc", "matchingDomain", "parts"]
}
